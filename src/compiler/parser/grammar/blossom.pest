//! Blossom Language Grammar
//! A modern, type-safe programming language with first-class error handling

// ========= Core Program Structure =========

BLOSSOM = {
    SOI ~ MODULE_DECLARATION ~ ANNOTATIONS ~ (TYPE_DEFINITION | FUNCTION_DEFINITION | CONSTANT_DEFINITION)* ~ EOI
}

// ========= Core Language Elements =========

WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE    = _{ "\r\n" | "\n" | "\r" }

COMMENT = _{
    ("//" ~ (!NEWLINE ~ ANY)*)
  | ("/*" ~ (!"*/" ~ ANY)* ~ "*/")
}

IDENTIFIER = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// ========= Module System =========

MODULE_DECLARATION = { "%module" ~ IDENTIFIER }

PUBLIC_DECLARATION = { "%public" }

MODULE_PATH = { IDENTIFIER ~ ("." ~ IDENTIFIER)* }

IMPORT_DECLARATION = { "%import" ~ MODULE_PATH ~ ("as" ~ IDENTIFIER)? }

USING_DECLARATION = {
    "%using" ~ MODULE_PATH ~ ("." ~ (IDENTIFIER | IMPORT_LIST))?
}

IMPORT_LIST = {
    "[" ~ IDENTIFIER ~ ("," ~ IDENTIFIER)* ~ "]"
}

ANNOTATIONS = { (IMPORT_DECLARATION | USING_DECLARATION | PUBLIC_DECLARATION)* }

// ========= Visibility Modifiers =========

VISIBILITY_MODIFIER = { "+" | "-" }

// ========= Types =========

PRIMITIVE_TYPE = {
    "Bool"
  | "Int"
  | "Float"
  | "String"
  | "Unit"
}

TYPE_DEFINITION = {
    VISIBILITY_MODIFIER? ~ IDENTIFIER ~ ":=" ~ TYPE_EXPRESSION ~ CONSTRAINT_LIST?
}

TYPE_EXPRESSION = {
    PRIMITIVE_TYPE
  | COLLECTION_TYPE
  | ATOM_TYPE
  | MOLECULE_TYPE
  | SCHEMA_TYPE
  | OPTIONAL_TYPE
  | GENERIC_TYPE
  | IDENTIFIER
}

GENERIC_TYPE = {
    IDENTIFIER ~ "<" ~ TYPE_EXPRESSION ~ ("," ~ TYPE_EXPRESSION)* ~ ">"
}

// Collections
COLLECTION_TYPE = {
    LIST_TYPE
  | SET_TYPE
  | MAP_TYPE
  | TUPLE_TYPE
  | RECORD_TYPE
}

LIST_TYPE    = { "List" ~ "<" ~ TYPE_EXPRESSION ~ ">" }
SET_TYPE     = { "Set" ~ "<" ~ TYPE_EXPRESSION ~ ">" }
MAP_TYPE     = { "Map" ~ "<" ~ TYPE_EXPRESSION ~ "," ~ TYPE_EXPRESSION ~ ">" }
TUPLE_TYPE   = { "(" ~ TYPE_EXPRESSION ~ ("," ~ TYPE_EXPRESSION)* ~ ")" }
RECORD_TYPE  = { "{" ~ RECORD_FIELD ~ ("," ~ RECORD_FIELD)* ~ "}" }
RECORD_FIELD = { IDENTIFIER ~ ":" ~ TYPE_EXPRESSION }

// Atoms and Molecules
ATOM_TYPE     = { "@" ~ IDENTIFIER }
MOLECULE_TYPE = { "@(" ~ IDENTIFIER ~ ("," ~ IDENTIFIER)* ~ ")" }

// Optional Type
OPTIONAL_TYPE = { "Optional" ~ "<" ~ TYPE_EXPRESSION ~ ">" }

// Schema Type
SCHEMA_TYPE   = { IDENTIFIER ~ ":>" ~ FUNCTION_TYPE }
FUNCTION_TYPE = { "(" ~ TYPE_EXPRESSION ~ ("," ~ TYPE_EXPRESSION)* ~ ")" ~ ":" ~ TYPE_EXPRESSION }

// Constraints
CONSTRAINT_LIST = {
    ("&>" ~ FUNCTION_CALL)+
}

// ========= Constants =========

CONSTANT_DEFINITION = {
    VISIBILITY_MODIFIER? ~ IDENTIFIER ~ ":" ~ TYPE_EXPRESSION ~ "=" ~ LITERAL
}

// ========= Functions =========

FUNCTION_DEFINITION = {
    VISIBILITY_MODIFIER? ~ IDENTIFIER ~ ("::" ~ FUNCTION_SIGNATURE ~ "->" | "->") ~ (EXPRESSION | BLOCK)
}

FUNCTION_SIGNATURE = { PARAMETERS? ~ RETURN_SPEC? ~ ERROR_SPEC? }

PARAMETERS = {
    "(" ~ (PARAMETER ~ ("," ~ PARAMETER)*)? ~ ")"
}

PARAMETER = {
    IDENTIFIER ~ ":" ~ TYPE_EXPRESSION
}

RETURN_SPEC = { ":" ~ (IDENTIFIER | TYPE_EXPRESSION) }

ERROR_SPEC = {
    "!" ~ ("@" ~ IDENTIFIER | "@(" ~ IDENTIFIER ~ ("," ~ IDENTIFIER)* ~ ")")
}

// ========= Expressions =========

EXPRESSION = _{
    PRIMARY_EXPRESSION ~ (BINARY_OPERATOR ~ PRIMARY_EXPRESSION)*
}

PRIMARY_EXPRESSION = {
    THROW_EXPRESSION
  | MATCH_EXPRESSION
  | FUNCTION_CALL
  | LITERAL
  | IDENTIFIER
  | "(" ~ EXPRESSION ~ ")"
}

// ========= Pattern Matching =========

MATCH_EXPRESSION = {
    "match" ~ EXPRESSION ~ "->" ~ "{" ~ (MATCH_ARM ~ ("," ~ MATCH_ARM)*)? ~ "}"
}

MATCH_ARM = {
    MATCH_PATTERN ~ ("if" ~ EXPRESSION)? ~ "=>" ~ (THROW_EXPRESSION | EXPRESSION | BLOCK)
}

MATCH_PATTERN = {
    LITERAL
  | "_"
  | IDENTIFIER
  | LIST_PATTERN
  | TUPLE_PATTERN
  | RECORD_PATTERN
  | SPREAD_PATTERN
}

SPREAD_PATTERN = { "..." ~ IDENTIFIER }
LIST_PATTERN   = { "[" ~ (MATCH_PATTERN ~ ("," ~ MATCH_PATTERN)* ~ ("," ~ SPREAD_PATTERN)?)? ~ "]" }
TUPLE_PATTERN  = { "(" ~ MATCH_PATTERN ~ ("," ~ MATCH_PATTERN)* ~ ")" }
RECORD_PATTERN = {
    "{" ~ ((IDENTIFIER ~ ":" ~ MATCH_PATTERN) ~ ("," ~ IDENTIFIER ~ ":" ~ MATCH_PATTERN)* ~ ("," ~ "_")?) ~ "}"
}

// ========= Literals =========

LITERAL = {
    FLOAT_LITERAL
  | INT_LITERAL
  | BOOL_LITERAL
  | STRING_LITERAL
  | UNIT_LITERAL
  | COLLECTION_LITERAL
  | ATOM_LITERAL
}

BOOL_LITERAL   =  { "True" | "False" }
INT_LITERAL    = @{ "-"? ~ ASCII_DIGIT+ }
FLOAT_LITERAL  = @{
    "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ (("e" | "E") ~ ("-" | "+")? ~ ASCII_DIGIT+)?
}
STRING_LITERAL = @{ "\"" ~ (STRING_TEMPLATE_EXPR | (!"\"" ~ ANY))* ~ "\"" }
UNIT_LITERAL   =  { "None" | "Unit" }

COLLECTION_LITERAL = {
    LIST_LITERAL
  | SET_LITERAL
  | MAP_LITERAL
  | TUPLE_LITERAL
  | RECORD_LITERAL
}

LIST_LITERAL   = { "[" ~ (EXPRESSION ~ ("," ~ EXPRESSION)*)? ~ "]" }
SET_LITERAL    = { "{" ~ (EXPRESSION ~ ("," ~ EXPRESSION)*)? ~ "}" }
MAP_LITERAL    = { "[" ~ (EXPRESSION ~ "=>" ~ EXPRESSION ~ ("," ~ EXPRESSION ~ "=>" ~ EXPRESSION)*)? ~ "]" }
TUPLE_LITERAL  = { "(" ~ EXPRESSION ~ ("," ~ EXPRESSION)* ~ ")" }
RECORD_LITERAL = { "{" ~ (IDENTIFIER ~ ":" ~ EXPRESSION) ~ ("," ~ IDENTIFIER ~ ":" ~ EXPRESSION)* ~ "}" }

ATOM_LITERAL = { "@" ~ IDENTIFIER }

// ========= String Templates =========

STRING_TEMPLATE_EXPR = { "{" ~ EXPRESSION ~ "}" }

// ========= Operators =========

BINARY_OPERATOR = _{
    "+"
  | "-"
  | "*"
  | "/"
  | "%"
  | // Arithmetic
  "&"
  | "|"
  | "!"
  | // Boolean
  "=="
  | "!="
  | ">"
  | "<"
  | ">="
  | "<="
  | // Comparison
  ":"
  | ":="
  | ":>"
  | "&>" // Type/Schema
}

// ========= Pipeline =========

PIPELINE_EXPRESSION = {
    TERM ~ (PIPELINE_STEP)*
}

PIPELINE_STEP = {
    STANDARD_PIPE
  | ERROR_PIPE
}

STANDARD_PIPE = {
    "|>" ~ EXPRESSION
}

ERROR_PIPE = {
    "!>" ~ "{" ~ (ERROR_CASE)? ~ "}"
}

ERROR_CASE = {
    ATOM_LITERAL ~ "=>" ~ EXPRESSION
}

TERM = {
    LITERAL
  | IDENTIFIER
  | FUNCTION_CALL
  | MATCH_EXPRESSION
  | THROW_EXPRESSION
  | "(" ~ EXPRESSION ~ ")"
}

// ========= Error Handling =========

THROW_EXPRESSION = { "throw" ~ ATOM_LITERAL }

// ========= Function Calls =========

FUNCTION_CALL = {
    IDENTIFIER ~ ("." ~ IDENTIFIER)* ~ "(" ~ (EXPRESSION ~ ("," ~ EXPRESSION)*)? ~ ")"
}

// ========= Block =========

BLOCK = {
    "{" ~ (STATEMENT)* ~ EXPRESSION? ~ "}"
}

STATEMENT = { EXPRESSION | VARIABLE_DEFINITION }

VARIABLE_DEFINITION = {
    IDENTIFIER ~ ":" ~ TYPE_EXPRESSION ~ "=" ~ EXPRESSION
}

// ========= Comparison =========

COMPARISON_EXPRESSION = {
    EXPRESSION ~ COMPARISON_OPERATOR ~ EXPRESSION
}

COMPARISON_OPERATOR = { "==" | "!=" | ">" | "<" | ">=" | "<=" }
